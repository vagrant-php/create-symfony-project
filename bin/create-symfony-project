#!/bin/bash

## http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in ##

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

##################################################################################################

# defaults
symfonyVersion=2.7.5

# get all parameters
for i in "$@"
do
    case $i in
        -p=*|--projectname=*)
            projectName="${i#*=}"
            shift
        ;;
        -s=*|--symfonyversion=*)
            symfonyVersion="${i#*=}"
            shift
        ;;
        -h|--help)
            echo "usage: create-symfony-project --projectname=myproject --symfonyversion=2.7.5"
            echo "usage: create-symfony-project -p=myproject -s=2.7.5"
            exit 0
        ;;
    esac
done

# get symfony version parts
symfonyVersionParts=(${symfonyVersion//./ })
symfonyMinorVersion=${symfonyVersionParts[0]}.${symfonyVersionParts[1]}

# check for projectname
if [ -z "$projectName" ]; then
    echo "please enter a project name: --projectname=myproject"
    exit 1
fi

# check for projectname signs
if [[ $projectName = *[^[:alnum:]]* ]]; then
    echo "please enter a project name which is alphanumeric"
    exit 1
fi

# check if the project directory allready exists
if [ -d "$projectName" ]; then
    echo "please enter a another project name, directory allready exists"
    exit 1
fi

# download only if not allready downloaded
if [ ! -f $DIR/../downloads/v$symfonyVersion.zip ]; then
    # zip url
    url="https://github.com/symfony/symfony-standard/archive/v$symfonyVersion.zip"

    # check if the url is callable
    curl -s --head $url | head -n 1 | grep "HTTP/1.[01] [23].." > /dev/null
    if [ "$?" ==  1 ]; then
        echo "can't resolve url $url"
        exit 1
    fi

    # download symfony
    curl -L $url -o $DIR/../downloads/v$symfonyVersion.zip
fi

# extract symfony
unzip $DIR/../downloads/v$symfonyVersion.zip

# move extracted symfony to a dir with project name
mv symfony-standard-$symfonyVersion $projectName

cd $projectName

git init

# add vagrant setup as submodule
git submodule add -b v1-ubuntu https://github.com/dominikzogg/vagrant-php.git

# prepare a default vagrant.yml
printf "hostname: $projectName.dev\napplication: symfony\n" > vagrant.yml

# copy app_dev.php if exists for this version
if [ -f "$DIR/../files/$symfonyVersion/app_dev.php" ]; then
    cp -f $DIR/../files/$symfonyVersion/app_dev.php web/app_dev.php
    
# copy app_dev.php if exists for this minor version    
elif [ -f "$DIR/../files/$symfonyMinorVersion/app_dev.php" ]; then
    cp -f $DIR/../files/$symfonyMinorVersion/app_dev.php web/app_dev.php
fi

# copy AppKernel.php if exists for this version
if [ -f "$DIR/../files/$symfonyVersion/AppKernel.php" ]; then
    cp -f $DIR/../files/$symfonyVersion/AppKernel.php app/AppKernel.php
    
# copy AppKernel.php if exists for this minor version    
elif [ -f "$DIR/../files/$symfonyMinorVersion/AppKernel.php" ]; then
    cp -f $DIR/../files/$symfonyMinorVersion/AppKernel.php app/AppKernel.php
fi

# copy runtime_dir_config.php if exists for this version
if [ -f "$DIR/../files/$symfonyVersion/runtime_dir_config.php" ]; then
    cp -f $DIR/../files/$symfonyVersion/runtime_dir_config.php web/runtime_dir_config.php
    cp -f $DIR/../files/$symfonyVersion/runtime_dir_config.php web/runtime_dir_config.php.dist
    printf "\n/app/runtime_dir_config.php" >> .gitignore
    
# copy runtime_dir_config.php if exists for this minor version    
elif [ -f "$DIR/../files/$symfonyMinorVersion/runtime_dir_config.php" ]; then
    cp -f $DIR/../files/$symfonyMinorVersion/runtime_dir_config.php web/runtime_dir_config.php
    cp -f $DIR/../files/$symfonyMinorVersion/runtime_dir_config.php web/runtime_dir_config.php.dist
    printf "\n/app/runtime_dir_config.php" >> .gitignore
fi

# add parameters.yml
printf "parameters:\n" > app/config/parameters.yml
printf "    database_host: 127.0.0.1\n" >> app/config/parameters.yml
printf "    database_port: ~\n" >> app/config/parameters.yml
printf "    database_name: $projectName\n" >> app/config/parameters.yml
printf "    database_user: root\n" >> app/config/parameters.yml
printf "    database_password: root\n" >> app/config/parameters.yml
printf "    mailer_transport: smtp\n" >> app/config/parameters.yml
printf "    mailer_host: 127.0.0.1\n" >> app/config/parameters.yml
printf "    mailer_user: ~\n" >> app/config/parameters.yml
printf "    mailer_password: ~\n" >> app/config/parameters.yml
printf "    secret: vagrant\n" >> app/config/parameters.yml

cd vagrant-php

# setup vagrant
vagrant up

# create database
vagrant ssh -c "echo 'CREATE DATABASE $projectName;' | mysql"

# setup symfony
vagrant ssh -c "cd /vagrant && composer.phar install"
